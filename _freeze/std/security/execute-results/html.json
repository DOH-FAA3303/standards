{
  "hash": "f2c73fcbc469e47984fbcc8e715c48c6",
  "result": {
    "markdown": "---\ntitle: \"Security Standards\"\ndescription: Protect your credentials, tokens, data and more\ndate: September 1, 2023\ndate-modified: today\nauthor: \n  - Frank Aragona\n  - Kathleen Conery\nformat: \n  html:\n    code-fold: false\n    code-overflow: wrap\n    toc: true\n    number-sections: true\nexecute: \n  eval: false\n  freeze: true\nknitr: true\nfilters: \n  - line-highlight\nreference-location: margin\ncitation-location: margin\n---\n\n\n:::{.note}\n{{< fa unlock size=\"3x\" >}} **Objectives**\n\n1.  Provide security guidelines\n2.  Set up security guardrails\n3.  Develop a process for reviewing code and pushing private code to a public repo\n:::\n\n<br>\n\n> \"I solemnly swear I am up to no good.\"\n>\n> \\- Harry Potter\n\n::: column-body-outset\n# Github Security Guidelines\n\nThe following shall not be included in any repo **or any local commit!**:\n\n-   Absolute file paths\n-   WDRS server names\n-   SSH server keys\n-   Tokens (REDCap, Azure, etc)\n-   Credentials\n-   PBI key to save in Azure\n-   ODBC connections\n-   Azure blob keys\n-   Block local paths (e.g., c drive file paths, y drive file paths)\n-   Usernames (Github usernames are okay)\n-   Connection strings\n-   Specific location information (e.g., addresses where mosquito traps are placed for gathering mosquitoes samples for surveillance of west Nile)\n\n::: callout-warning\nIf any of these are committed to the remote repo then they will stay in the git history (and will require a lot of effort to remove them from the history).\n\nThe best line of defense is setting up local guardrails to prevent security leaks in the first place. This section will show how to make these local guardrails\n:::\n\n<br>\n\n## Prevent Credential Leaks with Env Variables {.unnumbered}\n\nThere are a number of ways to do this. We typically use a yaml file that can be filled out with personal credentials locally. The file will not be committed to the remote repo\n\n### Create a private credentials file\n\nThe scripts use a `.yml` file that contains a list of API tokens, server names, and usernames/passwords specific to each individual user. There are two `.yml` files. One is a template (containing no actual passwords..) that exists in the repo and serves as a template so every individual user can keep up to date with new credential additions. The other is the individual `creds.yml` that is in the repo's `.gitignore`. This file will never exist in the repo and only exist locally (in the user's C drive).\n\n### `creds.yml` details\n\nThe `.yml` file can work with multiple programming languages including R and Python. They are read in the same way and can be easily adjusted when adding new passwords or using them as configuration files.\n\nThey look like this:\n\n::: myframe\n\n::: {.cell filename='local_credentials.yml'}\n\n```{.yaml .cell-code}\n# Default is needed to distinguish values.\n# Leave a blank line (NO SPACES) as the last line in this file or things will break\n# Quotes aren't necessary, but can be used.\ndefault: \n  conn_list_wdrs:\n    Driver: \"SQL Server Native Client 11.0\"\n    Server: \n    Database: \n    Trusted_connection: \n    ApplicationIntent: \n    \n  fulgent:\n    username: <USERNAME>\n    password: <PASSWORD>\n\n```\n:::\n\n:::\n\nYou can have different variables assigned to unique lists, which allows for easy configuration. For example, the list starting with `default` has variables `conn_list_wdrs` and `fulgent`. You can have a different list of variables within the same file like this:\n\n::: myframe\n\n::: {.cell filename='local_credentials.yml' source-line-numbers='4-5,16-17'}\n\n```{.yaml .cell-code}\n# Default is needed to distinguish values.\n# Leave a blank line (NO SPACES) as the last line in this file or things will break\n# Quotes aren't necessary, but can be used.\ndefault: \n  conn_list_wdrs:\n    Driver: \"SQL Server Native Client 11.0\"\n    Server: \n    Database: \n    Trusted_connection: \n    ApplicationIntent: \n    \n  fulgent:\n    username: <USERNAME>\n    password: <PASSWORD>\n\ntest:\n  conn_list_wdrs:\n    Driver: \"SQL Server Native Client 11.0\"\n    Server: \n    Database: \n    Trusted_connection: \n    ApplicationIntent: \n\n```\n:::\n\n:::\n\nNow there is a `test` list with its own variables. This lets us switch a set of variables within our scripts. `default` applies to the main credentials where `test` can distinguish which variables should be test or dev scripts specific. Notice below that you can now call the credentials from a `.yml` file into an R or Python script and the actual credentials will never exist in the code pushed to the repo.\n\n::: myframe\n\n::: {.cell filename='script_in_repo.R'}\n\n```{.r .cell-code}\n# this script is in the repo, but credentials are hidden\nlibrary(yaml)\n\n# read in the local credentials yaml file\ncreds <- yaml::read_yaml(\"path/to/local_credentials.yml\")\n\n# pull in the credentials\nserver_name <- creds$default$conn_list_wdrs$server\n```\n:::\n\n:::\n:::\n\n###  {.unnumbered}\n\n::: {.column-screen-inset-shaded layout-nrow=\"1\"}\nWe can even get more specific and add an `if-else` statement to specify which credential we want to select. This can be helpful if we have a CI/CD pipeline and have a script automatically run on a task scheduler or cron job. We can call the credentials we want in the command line and have the command line code run in my task scheduler. That way we can use multiple different versions of the same script and have all of it be automated. For example, the middle panel uses the `commandArgs()` to pull any arguments passed to the script in a shell/command line script. In the right panel, the shell script has `production` and `test` as second arguments. These are passed to the R script as `arg[2]`. Now we can use `arg[2]` in the if-else statement to conditionally select credentials and do it automatically.\n\n\n::: {.cell filename='script_in_repo.R' source-line-numbers='1,9-14'}\n\n```{.r .cell-code}\nargs <- commandArgs(TRUE)\n\n# this script is in the repo, but credentials are hidden\nlibrary(yaml)\n\n# read in the local credentials yaml file\ncreds <- yaml::read_yaml(\"path/to/local_credentials.yml\")\n\n# pull in the credentials\nif(args[2] == \"production\"){\n  server_name <- creds$default$conn_list_wdrs$server\n} else if(args[2] == \"test\"){\n  server_name <- creds$test$conn_list_wdrs$server\n}\n```\n:::\n\n::: {.cell filename='shell_trigger_script.sh'}\n\n```{.bash .cell-code}\n# Run the production code\n$ Rscript -e \"source('path/script_in_repo.R');\" production\n\n# Run the test/dev code\n$ Rscript -e \"source('path/script_in_repo.R');\" test \n```\n:::\n\n:::\n\n### Safe Guards - Prevent Accidental Leaks!!!\n\nOnce you have the credentials.yml template in your repo, make sure that nobody on your team (or anyone with write access..) is able to accidentally push changes to the template. We don't want someone's passwords or API tokens to exist in GitHub.\n\n[This link shows how to skip any changes made to the specific file](https://stackoverflow.com/a/39776107). If someone makes local changes to the template, the changes will not show in their commit. It is a safe guard.\n\n#### For all individual users, run this code:\n\n::: smallframe\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit update-index --skip-worktree creds_TEMPLATE.yml\n```\n:::\n\n:::\n\nThis will tell your local git to ignore any changes made to `creds_TEMPLATE.yml`, but also allow it to exist in the repo (since `.gitignore` will prevent it from being in the repo)\n\n#### If you need to update the template file run this:\n\n::: smallframe\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit update-index --no-skip-worktree creds_TEMPLATE.yml\n```\n:::\n\n:::\n\nThis will allow changes to the template. **So when you need to update the template, use this code**\n\nAnd to get a list of files that are \"skipped\", use this code:\n\n::: smallframe\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit ls-files -v . | grep ^S\n```\n:::\n\n:::\n\n# Security Guardrails\n\nUsing a `.gitignore` file for environmental variables/credentials is an excellent guardrail and promotes good coding habits, but we may also want additional guardrails such as hooks.\n\nHooks are processes that run in the background and can prevent code from being pushed if there is a security flaw. There are two hooks we could use for security; pre-commit hooks and pre-receive hooks\n\n## Pre-commit Hooks\n\nPre-commit hooks run a process locally when the user attempts to commit code to a git branch. Hooks have many uses. Here we can use them as a security guardrail to prevent accidental credential leaks in committed code.\n\n1.  Clone or download the AWS Git Secrets repo from [awslabs GitHub](https://github.com/awslabs/git-secrets/blob/master/install.ps1)\n\n    ![](images/gh_secrets.PNG){.myframe}\n\n2.  Extract zip\n\n3.  Open folder and right click install.ps1\n\n    a.  Run in Power Shell\n    b.  Type Y to give permission\n\n4.  CD to a directory where you have the git repository you want to upload, either in PowerShell or R studio terminal {{< fa terminal >}}\n\n    ::: smallframe\n\n    ::: {.cell filename='PowerShell'}\n    \n    ```{.bash .cell-code}\n    PS > cd path/to/repo/root\n    ```\n    :::\n\n    :::\n\n5.  Run git secrets --install\n\n    ::: smallframe\n\n    ::: {.cell filename='PowerShell'}\n    \n    ```{.bash .cell-code}\n    git secrets --install\n    ```\n    :::\n\n    :::\n\n6.  Copy the regex file containing the secret patterns into your folder. -- make text file -- discuss with team what all we want to make illegal.\n\n7.  Run git secrets --add-provider -- cat ./secrets_key\n\n    ::: smallframe\n\n    ::: {.cell filename='PowerShell'}\n    \n    ```{.bash .cell-code}\n    git secrets --add-provider -- cat ./secrets_key\n    ```\n    :::\n\n    :::\n\n    You can also add prohibited patterns like this\n\n    ::: smallframe\n\n    ::: {.cell filename='PowerShell'}\n    \n    ```{.bash .cell-code}\n    # add a pattern\n    git secrets --add '[A-Z0-9]{20}'\n    \n    # add a literal string, the + is escaped\n    git secrets --add --literal 'foo+bar'\n    \n    # add an allowed pattern\n    git secrets --add -a 'allowed pattern'\n    ```\n    :::\n\n    :::\n\n8.  Test Git history by running\n\n    ::: smallframe\n\n    ::: {.cell filename='PowerShell'}\n    \n    ```{.bash .cell-code}\n    git secrets --scan-history\n    ```\n    :::\n\n    :::\n\n9.  If something gets flagged and you don't care about your history anymore: Delete .git folder and reinitialize repository\n\n    I would take caution about this point. There might be better ways to clean your git history if you don't want to get rid of everything.\n\n10. Test on one of my projects to see if rebasing is a sustainable option\n\n11. Make repo public\n\n12. Will automatically scan on every commit and won't let it commit unless it's clean - Create a few files to show it working\n\n::: callout-note\nWe can't use the \"Non capture group\" feature of regex. Meaning we can't use patterns like this in our regex: (?:abc) -- see https://regexr.com IMPORTANT: Tab separate your regex expressions. Making new lines caused a bit of chaos and took really long to figure out. (you can use multiple tabs to separate them more visually)\n:::\n\n## Pre-Recieve Hooks\n\nThese are still being investigated. They are remote hooks (not local like pre-commit hooks) that can be deployed throughout the Github organization. They can block certain commits from ever being pushed to the remote repo. They may make things unnecessarily complicated\n\n## Pushing Private Code to Public Repos\n\nWe may wish to take private codes and push them to a public repo. We need to make sure that the public code doesn't not contain sensitive or forbidden data/code, so cleaning up the private repo is important before pushing.\n\nThere are a few ways to do this, but the easiest way is to copy the clean private code to the public repo, that is, copy all the files you want to add publicly but **do not copy the `.git`** folder. If the private repo has a dirty git history we will not want that history in the public repo because the sensitive data will then be publicly available.\n\n::: {.column-screen-inset-shaded layout-nrow=\"1\"}\n![](images/private_repo3.PNG){.myframe}\n\n![](images/public_repo3.PNG){.myframe}\n:::\n\n<br>\n\n\n{{< fa circle-exclamation >}} The private repository on the left still contains sensitive information in the git history. The public repository on the right has a clean git history because we copied only the current clean files from the private repo and did not attach its git history (which lives in the hidden `.git` folder)\n\n\n<br>\n\n<br>\n\n# Code Reviewers/Github Operations Team\n\nWith the guardrails above in place there should be few chances that credentials get pushed to a repo. However accidents may still happen. We want to make sure that anyone who opens up a repo in the Github organization adheres to the rules, has the proper credential/coding set-up, and installs their local pre-commit hooks properly.\n\nIt may be useful to have a team within the organization that helps with repo set-up. The team would help avoid a scenario where a person opens up a repo without reading this documentation and understanding the rules (and thus potentially breaking security rules).\n\nThis Github Operations Team could also be helpful in managing permissions for members in the organization. See the video below on how the company Qualcomm manages their Github organization and how they use a Github Operations Team to guide new members access/repo development\n\n\n{{< video https://www.youtube.com/embed/1T4HAPBFbb0?si=YRsUYXIxLPhdr41T >}}\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}