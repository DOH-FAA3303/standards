{
  "hash": "daf27096547f844f1709e4af8496280b",
  "result": {
    "markdown": "---\ntitle: \"Github Organization Policies\"\ndescription: Coding at the Organization level to ensure policies are reflected in each repo\ndate: November 22, 2023\ndate-modified: today\nauthor: \n  - name: Frank Aragona\n    email: frank.aragona@doh.wa.gov\n    affiliations:\n      - Washington Department of Health\n      - Data Integration/Quality Assurance\nformat: \n  html:\n    code-fold: false\n    code-overflow: wrap\n    toc: true\n    number-sections: true\nknitr: true\nexecute: \n  eval: false\nfilters: \n  - line-highlight\n---\n\n\n::: note\n{{< fa file-circle-check size=\"3x\" >}} **Objectives**\n\n1.    Ensure that all repos in the org have the required documents\n2.    Set policy rules at the Organization level\n3.    All repos need to have reproducible code\n4.    All repos need documentation via README and/or Github Pages\n:::\n\nIn the Github Organization we may require all repositories to contain certain documents. For example, we want to make sure that every repo has a `CODE OF CONDUCT` document that is a general policy applied throughout the organization. \n\nWe could make a `CODE OF CONDUCT` document and manually copy and paste it into each repo, but this will become unmanageable over time because\n\n1.  if there are many repos it will be a burden to copy and paste the policy into each one\n2.  we will need to force anyone making a new repo to copy and paste the policy, and\n3.  if the policy changes we will need to edit the policy for every single repo\n\nThus, **we need a way to programmatically set a policy rule that can be applied to each repo, old or new, and can update the policy for each repo if needed.** This will save a lot of time and effort\n\n# Required Documents\n\nWe may want the follow files to be in every single repo, new or existing, to have the following documents:\n\n1.  A `README.md` for documentation\n2.  `CODE_OF_CONDUCT.md` to define the [\"standards for how to engage in a community\"](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-a-code-of-conduct-to-your-project)\n3.  `CONTRIBUTING.md` this file can set a policy for people wanting to contribute to a repo. Some organizations require people to sign a form before submitting pull requests so that the user understands what they are contributing to and how their code will be used\n4.  `LICENSE` this may be different for each repository, but we can set something general at the org level\n\n## `README` {.unnumbered}\n\n`README` files are instructions or documentation on how to use your software. It should give a quick introduction to the repo and instructions on how to install or run the code.\n\n## `CODE_OF_CONDUCT` {.unnumbered}\n\nA Code of Conduct can let a user know what the rules of the organization are and how any wrongful behavior will be addressed. The document will provide the [\"standards for how to engage in a community\"](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-a-code-of-conduct-to-your-project)\n\n## `CONTRIBUTING.md` {.unnumbered}\n\nThis file should appear in the issue tab in a repo. It lets a user know how they can contribute to the project and if they need to sign any forms before contributing. Some larger organizations require that a person knows what they are contributing to and they must sign a form acknowledging that any software/code contributions to the project will be used and cannot be retracted by the user. The code submitted may also be used to develop processes but the organization will not pay the individual contributor (since this is open-source, we only look for open-source contributions)\n\n## `LICENSE` {.unnumbered}\n\nThese should be and are set at the repo level. There will be many different licenses to choose from that will depend on the specific repo. More on that here.\n\n\n# Set Policy Rules at Org Level\n\nPolicy rules may include requiring certain documents in each repo or requiring that a person sign every commit.\n\n\n## Document Requirements with `.github` Repos\n\nYou can set most policy rules and create documents for each repo at the organization level by using a special `.github` repo. Dot files and dot folders have special functionality in some software. For Github, the `.github` folder defines workflows for things like Github Actions in a repo. A `.github` *repository* on the other hand defines *organization level* rules and templates.\n\n![](images/special.PNG){.myframe}\n\n<br>\n\nIn order to write and set these policies at the organization level we can put them at the root of the `.github` repository and edit them there.\n\n::: smallframe\n\n::: {.cell filename='PowerShell' source-line-numbers='4-7'}\n\n```{.bash .cell-code}\n$ tree /f\nC:.\n‚îÇ   .gitignore\n‚îÇ   CODE_OF_CONDUCT.md\n‚îÇ   CONTRIBUTING.md\n‚îÇ   LICENSE\n‚îÇ   README.md\n‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ.github\n‚îî‚îÄ‚îÄ‚îÄprofile\n        README.md\n```\n:::\n\n:::\n\n<br>\n\nTake a look above. I have the required documents/policies at the root of the `.github` repo directory. Now if I open up any given repo in the organization I will find a link to those files:\n\n![](images/code_of_conduct.PNG){.myframe}\n\n<br>\n\nIf you click on the `CODE_OF_CONDUCT` link it will take you right to the `.github` repo and open the `CODE_OF_CONDUCT.md` file there:\n\n![](images/code_of_conduct.gif){.myframe}\n\n<br>\n\nNow you can set organization level policies from the `.github` repo and they will automatically populate in *all* existing and new repositories *unless there are repo specific policies in place*. If a repo already has its own policies they will not be overwritten.\n\n# Set Templates at the Org Level\n\nAside from policy documents, you can make templates at the organization level. Two commonly used templates are issue templates and discussion templates.\n\nIn the public repos there may be end users that may have limited experience using Github. If they want to submit an issue or ask a question they get lost. Templates can help them form a question or idea. Templates can also help standardize how issues and discussions are maintained throughout the organization.\n\nStructuring the format of issues and discussions can make the author and the end-user's lives easier.\n\n<br>\n\nIn the `.github` repo I made a *folder* called `.github`. This is a special folder that can hold Github Action workflows and more, as mentioned above.\n\nIn the `.github` *folder* I have a folder called `DISCUSSION_TEMPLATE` and another called `ISSUE_TEMPLATE`. These are special folders that Github recognizes as discussion and issue folders that will set templates at the repo (or in this case the org) level.\n\n::: smallframe\n\n::: {.cell filename='PowerShell' source-line-numbers='9-20'}\n\n```{.bash .cell-code}\n$ tree /f\nC:.\n‚îÇ   .gitignore\n‚îÇ   CODE_OF_CONDUCT.md\n‚îÇ   CONTRIBUTING.md\n‚îÇ   LICENSE\n‚îÇ   README.md\n‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ.github\n‚îÇ   ‚îÇ   pull_request_template.md\n‚îÇ   ‚îÇ\n‚îÇ   ‚îú‚îÄ‚îÄ‚îÄDISCUSSION_TEMPLATE\n‚îÇ   ‚îÇ       feature-requests.yml\n‚îÇ   ‚îÇ       q-a.yml\n‚îÇ   ‚îÇ       show-and-tell.yml\n‚îÇ   ‚îÇ\n‚îÇ   ‚îî‚îÄ‚îÄ‚îÄISSUE_TEMPLATE\n‚îÇ           bug_report.yml\n‚îÇ           config.yml\n‚îÇ           feature_request.yml\n‚îÇ\n‚îî‚îÄ‚îÄ‚îÄprofile\n        README.md\n```\n:::\n\n:::\n\nEach Folder has `.yml` files in it that are basically Github instructions on how to format issues and discussions.\n\nFor example, in the `ISSUE_TEMPLATE` folder I have a `.yml` file called `bug_report.yml`. This file contains the structure for how someone can report a bug.\n\n::: smallframe\n\n::: {.cell filename='bug_report.yml'}\n\n```{.yaml .cell-code}\nname: üêõBug Report\ndescription: File a bug report here\ntitle: \"[BUG]: \"\nlabels: [\"bug\"]\nassignees: [\"DOH-FAA3303\"]\nbody:\n  - type: markdown\n    attributes:\n      value: |\n        Thanks for taking the time to fill out this bug report ü§ó\n        Make sure there aren't any open/closed issues for this topic üòÉ\n```\n:::\n\n:::\n\n<br>\n\nNow, when someone clicks on the `Issues` tab in a repo in this organization they will be met with the `Bug Report` template:\n\n![](images/bug_report.gif){.myframe}\n\n<br>\n\nNotice that in the template you can create text areas and pre-fill those areas with suggestions. You can even require that someone fills out those areas before they can submit the issue:\n\n:::{.smallframe}\n\n::: {.cell filename='bug_report.yml' source-line-numbers='1,6-10,11-12'}\n\n```{.yaml .cell-code}\n- type: textarea\n    id: steps-to-reproduce\n    attributes:\n      label: Steps To Reproduce\n      description: Steps to reproduce the behavior.\n      placeholder: |\n        1. Go to '...'\n        2. Click on '...'\n        3. Scroll down to '...'\n        4. See error\n    validations:\n      required: true\n\n```\n:::\n\n:::\n\n![](images/bug_report.jpg){.myframe}\n\n## Commit Sign-Off Requirement - Github Apps\n\nWe may want to require authors or reviewers to sign-off on commits to a repo. This is sometimes established in projects to [\"ensure that copyrighted code not released under an appropriate free software (open source) license is not included in the kernel.\"](https://stackoverflow.com/a/1962112)\n\nYou can install a Github App in the organization and it will be applied to all repos. [The DCO App (Developer Certificate of Origin) is popular and lightweight](https://github.com/apps/dco). To install it in the organization, click on Configure and it will give you the option to configure it with the organization of choice.\n\n# IaC\n\nInfrastructure as Code (IaC) can be helpful when managing administration tasks or writing hooks at the org level.\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}