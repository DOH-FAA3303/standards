---
title: "Github Organization Templates and IaC"
description: Coding at the Organization level to ensure rules and templates are in each repo
date: November 22, 2023
date-modified: today
author: 
  - name: Frank Aragona
    email: frank.aragona@doh.wa.gov
    affiliations:
      - Washington Department of Health
      - Data Integration/Quality Assurance
format: 
  html:
    code-fold: false
    code-overflow: wrap
    toc: true
    number-sections: true
knitr: true
execute: 
  eval: false
filters: 
  - line-highlight
---

::: obj
**Objectives**

1.  Ensure that all repos in the org have the required documents
2.  Set policy rules at the Organization level
3.  Create template structure documents for each repo
4.  Explore Infrastructure as Code (IaC) for administration
:::

# Required Documents

In the Github Organization we may require all repositories to contain certain documents. For example, we want to make sure that every repo has a `CODE OF CONDUCT` document that is a general policy applied throughout the organization. This way an organization can set a policy one time and not need to worry that each repo is contains the policy.

We could make a `CODE OF CONDUCT` document and manually copy and paste it into each repo, but this will become unmanageable over time because

1.  if there are many repos it will be a burden to copy and paste the policy into each one
2.  we will need to force anyone making a new repo to copy and paste the policy, and
3.  if the policy changes we will need to edit the policy for every single repo

Thus, **we need a way to programmatically set a policy rule that can be applied to each repo, old or new, and can update the policy for each repo if needed.** This will save a lot of time and effort

## Set Policy Rules at Org Level

You can set most policy rules and create documents for each repo at the organization level by using a special `.github` repo. Dot files and dot folders have special functionality in some software. For Github, the `.github` folder defines workflows for things like Github Actions in a repo. A `.github` *repository* on the other hand defines *organization level* rules and templates.

![](images/special.PNG){.myframe}

We may want the follow files to be in every single repo, new or existing, to have the following documents:

1.  A `README.md` for documentation
2.  `CODE_OF_CONDUCT.md` to define the ["standards for how to engage in a community"](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-a-code-of-conduct-to-your-project)
3.  `CONTRIBUTING.md` this file can set a policy for people wanting to contribute to a repo. Some organizations require people to sign a form before submitting pull requests so that the user understands what they are contributing to and how their code will be used
4.  `LICENSE` this may be different for each repository, but we can set something general at the org level

<br>

In order to write and set these policies at the organization level we can put them at the root of the `.github` repository and edit them there.

::: smallframe
```{bash}
#| source-line-numbers: "4-7"
$ tree /f
C:.
‚îÇ   .gitignore
‚îÇ   CODE_OF_CONDUCT.md
‚îÇ   CONTRIBUTING.md
‚îÇ   LICENSE
‚îÇ   README.md
‚îÇ
‚îú‚îÄ‚îÄ‚îÄ.github
‚îî‚îÄ‚îÄ‚îÄprofile
        README.md
```
:::

<br>

Take a look above. I have the required documents/policies at the root of the `.github` repo directory. Now if I open up any given repo in the organization I will find a link to those files:

![](images/code_of_conduct.PNG){.myframe}

<br>

If you click on the `CODE_OF_CONDUCT` link it will take you right to the `.github` repo and open the `CODE_OF_CONDUCT.md` file there:

![](images/code_of_conduct.gif){.myframe}

<br>

Now you can set organization level policies from the `.github` repo and they will automatically populate in *all* existing and new repositories *unless there are repo specific policies in place*. If a repo already has its own policies they will not be overwritten.

## Set Templates at the Org Level

Aside from policy documents, you can make templates at the organization level. Two commonly used templates are issue templates and discussion templates.

In the public repos there may be end users that may have limited experience using Github. If they want to submit an issue or ask a question they get lost. Templates can help them form a question or idea. Templates can also help standardize how issues and discussions are maintained throughout the organization.

Structuring the format of issues and discussions can make the author and the end-user's lives easier.

<br>

In the `.github` repo I made a *folder* called `.github`. This is a special folder that can hold Github Action workflows and more, as mentioned above.

In the `.github` *folder* I have a folder called `DISCUSSION_TEMPLATE` and another called `ISSUE_TEMPLATE`. These are special folders that Github recognizes as discussion and issue folders that will set templates at the repo (or in this case the org) level.

::: smallframe
```{bash}
#| source-line-numbers: "9-20"
$ tree /f
C:.
‚îÇ   .gitignore
‚îÇ   CODE_OF_CONDUCT.md
‚îÇ   CONTRIBUTING.md
‚îÇ   LICENSE
‚îÇ   README.md
‚îÇ
‚îú‚îÄ‚îÄ‚îÄ.github
‚îÇ   ‚îÇ   pull_request_template.md
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ‚îÄDISCUSSION_TEMPLATE
‚îÇ   ‚îÇ       feature-requests.yml
‚îÇ   ‚îÇ       q-a.yml
‚îÇ   ‚îÇ       show-and-tell.yml
‚îÇ   ‚îÇ
‚îÇ   ‚îî‚îÄ‚îÄ‚îÄISSUE_TEMPLATE
‚îÇ           bug_report.yml
‚îÇ           config.yml
‚îÇ           feature_request.yml
‚îÇ
‚îî‚îÄ‚îÄ‚îÄprofile
        README.md
```
:::

Each Folder has `.yml` files in it that are basically Github instructions on how to format issues and discussions.

For example, in the `ISSUE_TEMPLATE` folder I have a `.yml` file called `bug_report.yml`. This file contains the structure for how someone can report a bug.

::: smallframe
```{yaml}
name: üêõBug Report
description: File a bug report here
title: "[BUG]: "
labels: ["bug"]
assignees: ["DOH-FAA3303"]
body:
  - type: markdown
    attributes:
      value: |
        Thanks for taking the time to fill out this bug report ü§ó
        Make sure there aren't any open/closed issues for this topic üòÉ
```
:::

<br>

Now, when someone clicks on the `Issues` tab in a repo in this organization they will be met with the `Bug Report` template:

![](images/bug_report.gif){.myframe}

<br>

Notice that in the template you can create text areas and pre-fill those areas with suggestions. You can even require that someone fills out those areas before they can submit the issue:

:::{.smallframe}
```{yaml}
#| source-line-numbers: "1,6-10,11-12"
- type: textarea
    id: steps-to-reproduce
    attributes:
      label: Steps To Reproduce
      description: Steps to reproduce the behavior.
      placeholder: |
        1. Go to '...'
        2. Click on '...'
        3. Scroll down to '...'
        4. See error
    validations:
      required: true

```
:::

![](images/bug_report.jpg){.myframe}


