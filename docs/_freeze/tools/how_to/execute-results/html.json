{
  "hash": "0f3d6816e1006c526b29a9471dc3a35c",
  "result": {
    "markdown": "---\ntitle: \"Code and Repo Documentation\"\ndescription: READMEs and using Github Pages and Quarto to make websites for documentation\ndate: September 1, 2023\ndate-modified: today\nauthor: \n  - name: Frank Aragona\n    email: frank.aragona@doh.wa.gov\n    affiliations:\n      - Washington Department of Health\n      - Data Integration/Quality Assurance\nformat: \n  html:\n    code-fold: false\n    code-overflow: wrap\n    toc: true\n    number-sections: true\n    # title-block-banner: true\nexecute: \n  freeze: true\n  echo: true\n  eval: false\nknitr: true\neditor: \n  markdown: \n    wrap: 72\nfilters: \n  - line-highlight\n---\n\n\n# Introduction\n\n![](images/DOH_logo_primary.jpg){style=\"float: right;\"\nfig-alt=\"Hex logo that says \\\"Data Science in a Box\\\"\" fig-align=\"right\"\nwidth=\"250\"}\n\nThis site was created using [Quarto](https://quarto.org/), Github, and\nuses a [Github Action](https://github.com/features/actions) to\nautomatically render when a commit is pushed to the main branch of this\nrepository.\n\nQuarto is a framework for creating documentation, slideshows, articles,\nblogs, books and websites using markdown. It can execute R, Python and\nother programming languages within the document.\n\nGithub Actions uses a `.yml` file in the repository to trigger an action\nbased on a certain event. In this case, when a commit is pushed to the\nmain branch the `.yml` will trigger this Quarto website to render to the\n`gh-pages` branch of the repository and publish the github page. This\nsection will give details on how to\n\n1.  Create the website\n2.  Create, edit, and troubleshoot the Github Action to render the site\n\n# Create a Quarto Website\n\nGo to:\n`File > New Project… > New Directory > Quarto Website > Create Project`\n\nThere is an option to use `renv` which is a virtual environment for the\nR project. This is helpful, but if you're unfamiliar with `renv` you can\nun-check it.\n\n![](images/create_quarto.gif)\n\n<br>\n\nThe Quarto project will come with a `_quarto.yml` file. This is similar\nto an rmarkdown `yml` header where you can specify how you want your\ndocument to be style and what format to output it to.\n\n# How to edit the website (add chapters and change the style)\n\nMost websites have a main file that sources all the htmls, css,\njavascript and other files into one. Quarto is the same - it sources all\nthe markdown files and css files into one `.yml` file that dictates the\noutput appearance and functionality of the site as a whole. Think of\n`.yml` files or headers as instructions for a document's style, output,\nand functions. It is the same thing as the `yaml` header in rmarkdown\nfiles.\n\n## Edit/Add Sections and Chapters\n\nTo add a section, open up the `_quarto.yml` file and scroll to the\n`navbar` section\n\n::: myframe\n\n::: {.cell filename='_quarto.yml' source-line-numbers='7-40'}\n\n```{.yaml .cell-code}\nproject:\n  type: website\nwebsite:\n  title: \"COE Github Standards\"\n  search: true\n  \n  navbar: \n    background: primary\n    left: \n      - text: Home\n        href: index.qmd\n      - text: Github Organization Standards\n        menu: \n          - href: std/security.qmd\n            text: \"0: Security Standards\"\n          - href: std/lic.qmd\n            text: \"1: Choosing a License\"\n          - href: std/templates.qmd\n            text: \"2: Org Policy Setting\"\n```\n:::\n\n:::\n\n<br>\n\nThis is where all of the `qmd` files are sourced and the instructions on\nhow to format and style the navigation bar in the website.\n\nCurrently, the project is set up to have each section have it's own drop\ndown menu in the navbar. In a section, use `- href:` to specify a file\nand `text:` to give the file a custom name in the website.\n\nEach chapter exists within a sub-folder, so to add a chapter make sure\ncreate the qmd in its sub-folder and then reference the sub-folder and\nchapter in the `.yml`. For example, if you make a new chapter called\n`new-chapter.qmd` and it exists in the `covid` section/sub-folder, you\nneed to reference it in the `.yml` file like: `covid/new-chapter.qmd`\n\n## Website Style\n\nYou can customize many aspects of the website in the `.yml` file itself\nwith the `format:` function. There are a ton of themes included in\nQuarto [here](https://bootswatch.com/) and you can also add a [custom\n`css` and/or\n`scss`](https://quarto.org/docs/output-formats/html-themes.html#custom-themes)\nfile to your project. I *think* you can even go super in depth and\ncustomize the javascript components of the site, but I'm not entirely\nsure how to do that yet. [This website](https://nbdev.fast.ai/) has a\nton of custom `css` components with Quarto, and possibly uses custom\njavascript, so it could be a place to start if you're interested.\nBasically, you need to embed the `css` file into your `_quarto.yml` file\n\n::: myframe\n\n::: {.cell filename='_quarto.yml'}\n\n```{.yaml .cell-code}\nformat:\n  html:\n    theme: \n      - cosmo\n      - assets/styles.scss\n    scss: assets/styles.scss\n    # css: styles.css\n    toc: true\n    highlight-style: assets/custom.theme\n```\n:::\n\n:::\n\n# How to edit a chapter\n\nFirst you must clone our github repository. For more information on\ncloning the repo, [follow these\ninstructions](git.qmd#Clone%20this%20repository)\n\nOnce you have a local clone you can start editing these files and push\nupdates.\n\nBasic steps:\n\n1.  Open the R Project\n2.  Open the folder/section you want to edit\n3.  Open the specific chapter in that section you want to edit (each\n    chapter is a `.qmd` file)\n4.  Save the change and push to the main branch (or make a pull request\n    to the main branch)\n\nOnce a commit is push to the main branch, it will trigger a Github\nAction to re-render the website and publish it to the main github\nrepository\n\n## Open the R project\n\nThis is a Quarto website that is contained in a `.rproj` file path. The\nR project contains all the documents used to create this website. Begin\nby opening the R project when should be in your local clone under\n`C:\\Users\\XXXXXXX\\Projects\\Sequencing_2.0\\sequencing_documentation\\sequencing_documentation.Rproj`\n\n![](images/open_doc.gif)\n\n## Open the files\n\nThis project has `.qmd` files (Quarto Markdown files) that each\nrepresent a chapter in the website. All of the `.qmd` files are knitted\ntogether (using R `knitr`) which compiles all of the files to be sourced\ninto htmls.\n\nThis website is set up to have each major section contain multiple\nchapters. To open a chapter, the bottom right pane in your R Studio\nwindow should contain folders for each section, highlighted below\n\n::: myframe\n\n::: {.cell source-line-numbers='14-21,23-30'}\n\n```{.bash .cell-code}\n$ tree /f\nC:.\n│   .gitignore\n│   about.qmd\n│   index.qmd\n│   standards.Rproj\n│   _quarto.yml\n│\n├───assets\n│       custom.theme\n│       styles.css\n│       styles.scss\n│\n├───std\n│   │   creds.qmd\n│   │   lic.qmd\n│   │   public_code.qmd\n│   │   security.qmd\n│   │   templates.qmd\n│   │\n│   └───images\n│\n├───tools\n│   │   how_to.qmd\n│   │   iac.qmd\n│   │   link_code.qmd\n│   │   readme.qmd\n│   │   release.qmd\n│   │   renv.qmd\n│   │   teams.qmd\n│   │\n│   └───images\n```\n:::\n\n:::\n\n<br>\n\nThe `.qmd` files are inside of these folders. Select one to edit.\n\n## Commit changes\n\nOnce you're done editing, push the change to the main branch (or make a\nnew branch, and then a pull request for the main branch). More one this\nin the [git](git.qmd) chapter\n\n# How to link external code to the site\n\nThe code in this website is automatically linked to the code in the\nrepository. This lets us update the code and not need to copy and paste\nany new changes to the documentation/github page\n\nTo do this, open your *external* R script in your repo. In this case\nwe're using `external_script.R`. Now wrap the chunks of code you\nwant to link with comments like this, `## ---- libraries` and\n`## ---- stop`:\n\n::: smallframe\n\n::: {.cell filename='external_script.R'}\n\n```{.r .cell-code}\n## ---- libraries\nlibrary(pacman)\np_load(\n  reticulate,\n  fs,\n  lubridate,\n  dplyr,\n  stringr,\n  magrittr,\n  readr,\n  httr\n)\n## ---- stop\n```\n:::\n\n:::\n\nThe `## ---- libraries` signals the beginning of a chunk. the\n`## ---- stop` signals the end of a chunk.\n\n<br>\n\nNow you can call this chunk in your *github page/quarto document* like\nthis:\n\nScan the external R script for code chunks:\n\n::: smallframe\n```` markdown\n```{{r setup}}\n#| echo: false\nknitr::read_chunk(file.path(getwd(),\"external_script.R\"))\n```\n````\n:::\n\n<br>\n\nCall the code chunk you want in the `{r}` header within the chunk. like\nthis `{r libraries}`:\n\n::: smallframe\n```` markdown\n```{{r libraries}}\n\n```\n````\n:::\n\n<br>\n\nAnd now the document will output any code in that code chunk and can\nalso execute that code chunk if you want. Here's what the output will\nlook like in this case:\n\n![](images/code-chunk.PNG)\n\n# Publish the site/Github Actions\n\nGithub Actions allow you to automate tasks in your repository. Quarto\nhas functions for Github Actions that allow you to automatically render\nyour Quarto document and publish it to Github Pages. [Github\nPages](https://pages.github.com/) is a free service from Github to host\na website. Documentation for R and Python code is usually found in a\nGithub Page within the package repository\n\nTo create this process, I followed the [Quarto dev\ndocumentation](https://github.com/quarto-dev/quarto-actions/blob/main/examples/example-01-basics.md#quarto-actions-basics):\n\n> Add the GitHub Actions workflow to your project\n>\n> 1.  Copy\n>     [quarto-publish-example.yml](https://github.com/quarto-dev/quarto-actions/blob/main/examples/quarto-publish-example.yml)\n>     to `.github/workflows/quarto-publish.yml`. Uncomment the \"Publish\n>     to GitHub Pages (and render)\" action. No further changes are\n>     needed to the action (in particular, do not edit the line below to\n>     add a secret to this file. This file has the same permissions as\n>     your repository, and might be publicly readable)\n>\n> 2.  run `quarto publish gh-pages` locally, once\n>\n> 3.  Quarto needs to configure the repository for publishing through\n>     GitHub Actions. To do this, run `quarto publish gh-pages` locally\n>     once.\n>\n> 4.  Now, add and commit the workflow file you have just created, and\n>     push the result to GitHub. This should trigger a new action from\n>     GitHub that will automatically render and publish your website\n>     through GitHub pages.\n>\n> Note that GitHub Pages uses a gh-pages branch in your repository,\n> which will be automatically created if one doesn't exist.\n\n<br>\n\n## Example `YAML` Workflow\n\nThe `.yml` workflow for this project looks something like this:\n\n`on:` is a tag indicating when the action will run. Right now it will\nrun when any code gets pushed to the main branch in the documentation\nfolder or `lineages_public_repo.R` script\n\n::: myframe\n\n::: {.cell filename='quarto-publish.yml'}\n\n```{.yaml .cell-code}\non: \n  push:\n    branches:\n      - main\n    paths:\n      - documentation/**\n      - lineages_public_repo.R\n```\n:::\n\n:::\n\n`jobs:` is a tag that tells a Github virtual machine what to run and\nwhat operating system to run it on. In this case `ubuntu` with the\n`latest` version. This can be `windows`, `linux` or `macOS`.\n\n::: myframe\n\n::: {.cell filename='quarto-publish.yml'}\n\n```{.yaml .cell-code}\nname: Render and Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n```\n:::\n\n:::\n\n<br>\n\nNow we have the steps:\n\n-   `env` will find the renv folder\n-   `uses: actions/checkout@v3` will refresh the repo and pull the\n    latest changes\n-   `uses: quarto-dev/quarto-actions/setup@v2` will install quarto\n-   `uses: actions/cache@v1` and the code below it will set up `renv`\n    and use the cached packages to install them onto the Github virtual\n    machine\n\n::: myframe\n\n::: {.cell filename='quarto-publish.yml'}\n\n```{.yaml .cell-code}\n    env:\n      RENV_PATHS_ROOT: ~/.cache/R/renv\n      \n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v3\n        \n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n        \n      - name: Prep CURL install\n        run: sudo apt-get update\n\n      - name: Install CURL Headers\n        run: sudo apt-get install libcurl4-openssl-dev\n\n      # - name: Setup Renv\n      #   uses: r-lib/actions/setup-renv@v2\n  \n      - name: Cache packages\n        uses: actions/cache@v1\n        with:\n          path: ${{ env.RENV_PATHS_ROOT }}\n          key: ${{ runner.os }}-renv-${{ hashFiles('**/renv.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-renv-\n      \n      - name: Restore packages\n        shell: Rscript {0}\n        run: |\n          if (!requireNamespace(\"renv\", quietly = TRUE)) install.packages(\"renv\")\n          renv::restore()\n```\n:::\n\n:::\n\n<br>\n\nAnd finally,\n\n-   `uses: quarto-dev/quarto-actions/publish@v2` will render the site by\n    running `quarto render`\n-   `with: target: gh-pages path: documentation/_site` lets you know\n    which branch and path to render the site to\n\n::: myframe\n\n::: {.cell filename='quarto-publish.yml'}\n\n```{.yaml .cell-code}\n      - name: Publish to GitHub Pages (and render)\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: gh-pages\n          path: documentation/_site\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # this secret is always available for github actions\n\n```\n:::\n\n:::\n\n## Using `renv` in the GH Action\n\nIf you need to constantly update your website with code chunk, this is\nthe best way to do it. It is also probably safer and better than the\n`_freeze` way, but it requires a better understanding of Github Actions\nand virtual environments.\n\n`renv` is an R package for creating a project level virtual environment.\nIn other words, `renv` will create project specific folders that contain\nthe specific R package versions you use in an project. [More on this\nhere](../wiki/venv.qmd)\n\nTo use `renv` in a Github Action, you can put\n\n::: smallframe\n\n::: {.cell filename='quarto-publish.yml'}\n\n```{.yaml .cell-code}\n- name: Setup Renv\n  uses: r-lib/actions/setup-renv@v2\n```\n:::\n\n:::\n\nor use the renv cache code in the `yaml` section above\n\n## Using a `_freeze` file\n\nIf you only need to execute the code once or just need to render a\nnon-executable code chunk once, make sure you have this code in your\n`_quarto.yml` file:\n\n::: smallframe\n\n::: {.cell filename='_quarto.yml'}\n\n```{.yaml .cell-code}\nexecute:\n  error: true\n  freeze: true\n```\n:::\n\n:::\n\nand then run this in your terminal window:\n\n`quarto render name-of-specific-document-or-chapter.qmd`\n\nThis will render that specific document in the website, execute code\nchunks if they are set to execute (`eval: true`) and then it will create\na **`_freeze`** file. The `_freeze` file will save a snapshot of that\nspecific document and *not* re-render it in the Github Action. This\nmeans you can render other parts of the website, but any files in the\n`_freeze` folder will stay the same as they are in the freeze. If you\nneed to make changes to a freeze document, run the quarto render code\nagain after making changes.\n\nThis is also documented in the [Quarto dev\ndocumentation](https://github.com/quarto-dev/quarto-actions/blob/main/examples/example-01-basics.md#quarto-actions-basics)\n\n## Troubleshooting\n\nSo you did these steps:\n\n1.  Create the `quarto-publish.yml`\n2.  Run `quarto publish gh-pages` in the **terminal**\n3.  Push all the files in your git to the main branch\n\nIf this works on your first try then the universe is taking extra\nspecial care of you.\n\nIf not, you are like the rest of us poor souls:/\n\n<br>\n\nThe first thing I would check is the error in your Github repo's Action\ntab.\n\n**If the error is something like `jsonlite not installed` or\n`some package not installed`** then it most likely means your are trying\nto commit a chunk of code in the documentation. *Even if you are not\nexecuting the code*, Github Actions will punish you. There are a couple\noptions to fix this, depending on your priorities.\n\n1.  If you don't care about executing your code and/or only need to push\n    that part of the script once, consider using the `_freeze` option\n2.  If you need to execute code *or* need to programmtically render the\n    document with code chunks often, consider using `renv` or a similar\n    package installation method\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}